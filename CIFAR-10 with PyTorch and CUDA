{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30823,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nukimayasari/cifar-10-with-pytorch-and-cuda?scriptVersionId=217791381\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:24.974207Z","iopub.execute_input":"2025-01-15T15:33:24.974468Z","iopub.status.idle":"2025-01-15T15:33:24.990117Z","shell.execute_reply.started":"2025-01-15T15:33:24.974447Z","shell.execute_reply":"2025-01-15T15:33:24.989273Z"}},"outputs":[],"execution_count":45},{"cell_type":"markdown","source":"# **Accelerating CIFAR-10 Image Classification with PyTorch and CUDA**\n\n## Introduction\nIn this project, we explore the application of **CUDA (Compute Unified Device Architecture)** to accelerate training a deep learning model for image classification tasks. CUDA is a parallel computing platform and application programming interface (API) model created by NVIDIA. It allows developers to harness the power of NVIDIA GPUs to perform general-purpose computations, enabling faster execution of complex tasks compared to CPU-only computations. This makes CUDA particularly valuable in deep learning, where training large models on large datasets can be computationally expensive and time-consuming.\n\nWe use the **CIFAR-10 dataset**, a popular benchmark dataset in computer vision containing 60,000 color images across 10 classes. Each image is small in size (32x32 pixels), but collectively, the dataset presents a challenging task for classification due to its complexity and variety. This project focuses on leveraging CUDA to efficiently train and optimize a convolutional neural network (CNN) for the CIFAR-10 dataset, aiming to achieve high accuracy while understanding the advantages of GPU acceleration. This notebook was developed with the assistance of ChatGPT.","metadata":{}},{"cell_type":"markdown","source":"### Reminder\n* Open a Kaggle notebook.\n* In the **Settings** tab on the right, under Accelerator, select **GPU**, I use GPU P100.","metadata":{}},{"cell_type":"markdown","source":"## Import Libraries\n\nThese libraries will help us use PyTorch and load image datasets.","metadata":{}},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torchvision\nimport torchvision.transforms as transforms","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:24.99188Z","iopub.execute_input":"2025-01-15T15:33:24.992076Z","iopub.status.idle":"2025-01-15T15:33:25.009154Z","shell.execute_reply.started":"2025-01-15T15:33:24.992059Z","shell.execute_reply":"2025-01-15T15:33:25.00842Z"}},"outputs":[],"execution_count":46},{"cell_type":"markdown","source":"## Load a Dataset\nWe'll use the **CIFAR-10** dataset, a small image classification dataset.","metadata":{}},{"cell_type":"code","source":"# Define transformations (normalize and convert images to tensors)\ntransform = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # Normalize to [-1, 1]\n])\n\n# Load CIFAR-10 dataset\ntrain_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_size=32, shuffle=True)\n\ntest_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\ntest_loader = torch.utils.data.DataLoader(test_dataset, batch_size=32, shuffle=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:25.009938Z","iopub.execute_input":"2025-01-15T15:33:25.010168Z","iopub.status.idle":"2025-01-15T15:33:26.713032Z","shell.execute_reply.started":"2025-01-15T15:33:25.010148Z","shell.execute_reply":"2025-01-15T15:33:26.712262Z"}},"outputs":[{"name":"stdout","text":"Files already downloaded and verified\nFiles already downloaded and verified\n","output_type":"stream"}],"execution_count":47},{"cell_type":"markdown","source":"## Peek at the Head of the Dataset\n\nTo peek at the head of our dataset, we can use the following approach depending on the type of data loader or dataset we're using. \n\n\n### For a PyTorch DataLoader\nIf we're using a PyTorch DataLoader, we can retrieve a batch of data and inspect the first few samples like this:","metadata":{}},{"cell_type":"code","source":"# Peek into the dataset from the DataLoader\ndataiter = iter(train_loader)  # Get an iterator for the DataLoader\nimages, labels = next(dataiter)  # Get the first batch\n\n# Display the first few images and labels\nprint(\"Labels:\", labels[:5])  # Print first 5 labels\nprint(\"Images shape:\", images[:5].shape)  # Print the shape of the first 5 images","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:45:48.071758Z","iopub.execute_input":"2025-01-15T15:45:48.072082Z","iopub.status.idle":"2025-01-15T15:45:48.091624Z","shell.execute_reply.started":"2025-01-15T15:45:48.072055Z","shell.execute_reply":"2025-01-15T15:45:48.090686Z"}},"outputs":[{"name":"stdout","text":"Labels: tensor([4, 2, 2, 4, 0])\nImages shape: torch.Size([5, 3, 32, 32])\n","output_type":"stream"}],"execution_count":58},{"cell_type":"markdown","source":"### For a Custom Dataset (e.g., `torchvision.datasets`)\nIf we're using a dataset like CIFAR10 or ImageFolder, we can directly index it:","metadata":{}},{"cell_type":"code","source":"# Peek into the dataset directly\nfor i in range(5):  # Display the first 5 samples\n    image, label = train_dataset[i]\n    print(f\"Sample {i}: Label={label}, Image shape={image.shape}\")\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:47:07.645911Z","iopub.execute_input":"2025-01-15T15:47:07.646193Z","iopub.status.idle":"2025-01-15T15:47:07.654594Z","shell.execute_reply.started":"2025-01-15T15:47:07.646174Z","shell.execute_reply":"2025-01-15T15:47:07.65379Z"}},"outputs":[{"name":"stdout","text":"Sample 0: Label=6, Image shape=torch.Size([3, 32, 32])\nSample 1: Label=9, Image shape=torch.Size([3, 32, 32])\nSample 2: Label=9, Image shape=torch.Size([3, 32, 32])\nSample 3: Label=4, Image shape=torch.Size([3, 32, 32])\nSample 4: Label=1, Image shape=torch.Size([3, 32, 32])\n","output_type":"stream"}],"execution_count":59},{"cell_type":"markdown","source":"### Visualizing the Dataset\nTo visually inspect the images:","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Helper function to unnormalize and display images\ndef imshow(img):\n    img = img / 2 + 0.5  # Unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n# Display the first few images\nimshow(torchvision.utils.make_grid(images[:5]))\nprint(\"Labels:\", labels[:5])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:48:00.645043Z","iopub.execute_input":"2025-01-15T15:48:00.64542Z","iopub.status.idle":"2025-01-15T15:48:00.872473Z","shell.execute_reply.started":"2025-01-15T15:48:00.645376Z","shell.execute_reply":"2025-01-15T15:48:00.871526Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Labels: tensor([4, 2, 2, 4, 0])\n","output_type":"stream"}],"execution_count":61},{"cell_type":"markdown","source":"## Define a Neural Network\nWe'll create a simple Convolutional Neural Network (CNN) for image classification.","metadata":{}},{"cell_type":"code","source":"class SimpleCNN(nn.Module):\n    def __init__(self):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)  # 3 channels (RGB) to 16 filters\n        self.pool = nn.MaxPool2d(2, 2)  # Max pooling\n        self.fc1 = nn.Linear(16 * 16 * 16, 10)  # Fully connected layer (10 classes)\n\n    def forward(self, x):\n        x = self.pool(torch.relu(self.conv1(x)))\n        x = x.view(-1, 16 * 16 * 16)  # Flatten\n        x = self.fc1(x)\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:26.713813Z","iopub.execute_input":"2025-01-15T15:33:26.714081Z","iopub.status.idle":"2025-01-15T15:33:26.719155Z","shell.execute_reply.started":"2025-01-15T15:33:26.714054Z","shell.execute_reply":"2025-01-15T15:33:26.718536Z"}},"outputs":[],"execution_count":48},{"cell_type":"markdown","source":"## Move the Model to GPU (CUDA)\n**CUDA** comes into play here! We move the model and data to the GPU for **acceleration**.","metadata":{}},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = SimpleCNN().to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:26.720018Z","iopub.execute_input":"2025-01-15T15:33:26.720298Z","iopub.status.idle":"2025-01-15T15:33:26.739579Z","shell.execute_reply.started":"2025-01-15T15:33:26.72027Z","shell.execute_reply":"2025-01-15T15:33:26.738957Z"}},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"## Train the Model\nWe'll train the model and observe how CUDA accelerates it.","metadata":{}},{"cell_type":"code","source":"criterion = nn.CrossEntropyLoss()  # Loss function\noptimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)  # Optimizer\n\n# Training loop\nfor epoch in range(2):  # Let's keep it short for now\n    running_loss = 0.0\n    for inputs, labels in train_loader:\n        inputs, labels = inputs.to(device), labels.to(device)  # Move data to GPU\n        \n        optimizer.zero_grad()  # Zero the gradients\n        outputs = model(inputs)  # Forward pass\n        loss = criterion(outputs, labels)  # Calculate loss\n        loss.backward()  # Backpropagation\n        optimizer.step()  # Update weights\n        \n        running_loss += loss.item()\n\n    print(f\"Epoch {epoch + 1}, Loss: {running_loss / len(train_loader)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:26.740469Z","iopub.execute_input":"2025-01-15T15:33:26.740753Z","iopub.status.idle":"2025-01-15T15:33:54.599297Z","shell.execute_reply.started":"2025-01-15T15:33:26.740724Z","shell.execute_reply":"2025-01-15T15:33:54.598435Z"}},"outputs":[{"name":"stdout","text":"Epoch 1, Loss: 1.7218262796133508\nEpoch 2, Loss: 1.3970764908207889\n","output_type":"stream"}],"execution_count":50},{"cell_type":"markdown","source":"## Evaluate the Model\nEvaluate the model's performance using the test dataset.","metadata":{}},{"cell_type":"code","source":"correct = 0\ntotal = 0\nmodel.eval()  # Switch to evaluation mode\n\nwith torch.no_grad():\n    for inputs, labels in test_loader:\n        inputs, labels = inputs.to(device), labels.to(device)  # Move data to GPU\n        outputs = model(inputs)\n        _, predicted = torch.max(outputs, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint(f\"Accuracy: {100 * correct / total:.2f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T15:33:54.60008Z","iopub.execute_input":"2025-01-15T15:33:54.600326Z","iopub.status.idle":"2025-01-15T15:33:57.108668Z","shell.execute_reply.started":"2025-01-15T15:33:54.6003Z","shell.execute_reply":"2025-01-15T15:33:57.107678Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 54.22%\n","output_type":"stream"}],"execution_count":51},{"cell_type":"markdown","source":"## Result\nAchieving **53.56% accuracy** on the **CIFAR-10** dataset is a solid baseline, especially for a simple model like the one we've implemented. Let’s make some improvements to increase the accuracy.","metadata":{}},{"cell_type":"markdown","source":"## **Model Improvements**\n\n## Add More Layers to the Model\nA deeper model can learn more complex features from the data. Let’s upgrade our `SimpleCNN`.\n\n**What’s new?**\n* More convolutional layers to extract richer features.\n* Dropout to reduce overfitting.","metadata":{}},{"cell_type":"code","source":"class ImprovedCNNWithRegularization(nn.Module):\n    def __init__(self):\n        super(ImprovedCNNWithRegularization, self).__init__()\n        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)\n        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.fc1 = nn.Linear(128 * 4 * 4, 256)\n        self.fc2 = nn.Linear(256, 10)\n        self.dropout = nn.Dropout(0.5)  # 50% Dropout\n\n    def forward(self, x):\n        x = self.pool(torch.relu(self.conv1(x)))\n        x = self.pool(torch.relu(self.conv2(x)))\n        x = self.pool(torch.relu(self.conv3(x)))\n        x = x.view(-1, 128 * 4 * 4)  # Flatten\n        x = self.dropout(torch.relu(self.fc1(x)))\n        x = self.fc2(x)\n        return x\n\nmodel = ImprovedCNNWithRegularization().to(device)\n\n# Define optimizer with L2 regularization\nimport torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-4)  # L2 regularization\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T16:10:32.620052Z","iopub.execute_input":"2025-01-15T16:10:32.620408Z","iopub.status.idle":"2025-01-15T16:10:32.636119Z","shell.execute_reply.started":"2025-01-15T16:10:32.620382Z","shell.execute_reply":"2025-01-15T16:10:32.635319Z"}},"outputs":[],"execution_count":62},{"cell_type":"markdown","source":"## Use a Better Optimizer\nSwitch to **Adam**, which often converges faster and better than SGD.","metadata":{}},{"cell_type":"code","source":"optimizer1 = torch.optim.Adam(model.parameters(), lr=0.001)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T16:10:38.025161Z","iopub.execute_input":"2025-01-15T16:10:38.025654Z","iopub.status.idle":"2025-01-15T16:10:38.031279Z","shell.execute_reply.started":"2025-01-15T16:10:38.025617Z","shell.execute_reply":"2025-01-15T16:10:38.030229Z"}},"outputs":[],"execution_count":63},{"cell_type":"markdown","source":"## Increase Training Epochs\nTwo epochs are too few for a model to learn effectively. Let’s increase it to 10 or more.","metadata":{}},{"cell_type":"code","source":"for epoch in range(10):  # Train for 10 epochs\n    running_loss = 0.0\n    for inputs, labels in train_loader:\n        inputs, labels = inputs.to(device), labels.to(device)\n        \n        optimizer1.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n\n    print(f\"Epoch {epoch + 1}, Loss: {running_loss / len(train_loader)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T16:10:40.894239Z","iopub.execute_input":"2025-01-15T16:10:40.894606Z","iopub.status.idle":"2025-01-15T16:13:28.504145Z","shell.execute_reply.started":"2025-01-15T16:10:40.894579Z","shell.execute_reply":"2025-01-15T16:13:28.503266Z"}},"outputs":[{"name":"stdout","text":"Epoch 1, Loss: 1.4577069119696273\nEpoch 2, Loss: 1.0463549454511165\nEpoch 3, Loss: 0.8693450663002805\nEpoch 4, Loss: 0.7664598584632727\nEpoch 5, Loss: 0.6875267901427458\nEpoch 6, Loss: 0.629996655912866\nEpoch 7, Loss: 0.5783816749040545\nEpoch 8, Loss: 0.5333465484095474\nEpoch 9, Loss: 0.4936349697015412\nEpoch 10, Loss: 0.4545877410464766\n","output_type":"stream"}],"execution_count":64},{"cell_type":"markdown","source":"## Data Augmentation\nAugmenting the data can help the model generalize better by introducing variations.","metadata":{}},{"cell_type":"code","source":"transform = transforms.Compose([\n    transforms.RandomHorizontalFlip(),  # Flip images horizontally\n    transforms.RandomCrop(32, padding=4),  # Random cropping with padding\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T16:13:48.830585Z","iopub.execute_input":"2025-01-15T16:13:48.830929Z","iopub.status.idle":"2025-01-15T16:13:48.835777Z","shell.execute_reply.started":"2025-01-15T16:13:48.830903Z","shell.execute_reply":"2025-01-15T16:13:48.834647Z"}},"outputs":[],"execution_count":65},{"cell_type":"markdown","source":"## Monitor Learning with Validation Accuracy\nTrack validation accuracy during training to prevent overfitting.","metadata":{}},{"cell_type":"code","source":"# Validation loop\nmodel.eval()\ncorrect = 0\ntotal = 0\nwith torch.no_grad():\n    for inputs, labels in test_loader:\n        inputs, labels = inputs.to(device), labels.to(device)\n        outputs = model(inputs)\n        _, predicted = torch.max(outputs, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint(f\"Validation Accuracy: {100 * correct / total:.2f}%\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T16:13:51.806378Z","iopub.execute_input":"2025-01-15T16:13:51.806714Z","iopub.status.idle":"2025-01-15T16:13:54.608755Z","shell.execute_reply.started":"2025-01-15T16:13:51.806693Z","shell.execute_reply":"2025-01-15T16:13:54.607798Z"}},"outputs":[{"name":"stdout","text":"Validation Accuracy: 76.89%\n","output_type":"stream"}],"execution_count":66},{"cell_type":"markdown","source":"## Result\nA validation accuracy of **76.89%%** is a significant improvement from the baseline","metadata":{}},{"cell_type":"markdown","source":"## Key Takeaways\n#### **What is CUDA?**\nCUDA is a parallel computing framework developed by NVIDIA, enabling developers to utilize GPU resources for computationally intensive tasks.\nIt accelerates deep learning by processing operations in parallel across thousands of GPU cores, reducing training times significantly.\n\n#### **Why Use CUDA?**\nTraining deep learning models, especially on large datasets, is computationally demanding.\nGPUs excel in parallel processing, offering significant speedups over CPUs.\nCUDA integrates seamlessly with frameworks like PyTorch, providing an accessible API for GPU acceleration.\n\n#### **About the Dataset:**\nThe CIFAR-10 dataset comprises 60,000 32x32 color images across 10 classes, including airplanes, automobiles, birds, and cats.\nIt is divided into 50,000 training and 10,000 test images.\nCIFAR-10 is widely used in machine learning research due to its small image size and challenging classification task.\n\n#### **Why Combine CIFAR-10 and CUDA?**\nTraining on CIFAR-10 can be computationally intensive for complex models.\nLeveraging CUDA for acceleration facilitates experimentation with deeper architectures and faster iterations.\nThis combination provides a hands-on opportunity to explore the benefits of GPU acceleration in real-world deep learning scenarios.","metadata":{}}]}